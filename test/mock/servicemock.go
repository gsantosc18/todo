// Code generated by MockGen. DO NOT EDIT.
// Source: internal/todo/service/contract.go
//
// Generated by this command:
//
//	mockgen -source=internal/todo/service/contract.go -destination=test/mock/servicemock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/gsantosc18/todo/internal/todo/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockTodoService is a mock of TodoService interface.
type MockTodoService struct {
	ctrl     *gomock.Controller
	recorder *MockTodoServiceMockRecorder
}

// MockTodoServiceMockRecorder is the mock recorder for MockTodoService.
type MockTodoServiceMockRecorder struct {
	mock *MockTodoService
}

// NewMockTodoService creates a new mock instance.
func NewMockTodoService(ctrl *gomock.Controller) *MockTodoService {
	mock := &MockTodoService{ctrl: ctrl}
	mock.recorder = &MockTodoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoService) EXPECT() *MockTodoServiceMockRecorder {
	return m.recorder
}

// DeleteTodo mocks base method.
func (m *MockTodoService) DeleteTodo(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockTodoServiceMockRecorder) DeleteTodo(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockTodoService)(nil).DeleteTodo), id)
}

// InserTodo mocks base method.
func (m *MockTodoService) InserTodo(todo *domain.Todo) (domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InserTodo", todo)
	ret0, _ := ret[0].(domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InserTodo indicates an expected call of InserTodo.
func (mr *MockTodoServiceMockRecorder) InserTodo(todo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InserTodo", reflect.TypeOf((*MockTodoService)(nil).InserTodo), todo)
}

// ListTodo mocks base method.
func (m *MockTodoService) ListTodo() []domain.Todo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTodo")
	ret0, _ := ret[0].([]domain.Todo)
	return ret0
}

// ListTodo indicates an expected call of ListTodo.
func (mr *MockTodoServiceMockRecorder) ListTodo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTodo", reflect.TypeOf((*MockTodoService)(nil).ListTodo))
}

// UpdateTodo mocks base method.
func (m *MockTodoService) UpdateTodo(id string, todo *domain.Todo) (domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodo", id, todo)
	ret0, _ := ret[0].(domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTodo indicates an expected call of UpdateTodo.
func (mr *MockTodoServiceMockRecorder) UpdateTodo(id, todo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MockTodoService)(nil).UpdateTodo), id, todo)
}
