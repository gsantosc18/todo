// Code generated by MockGen. DO NOT EDIT.
// Source: internal/todo/repository/contract.go
//
// Generated by this command:
//
//	mockgen -source=internal/todo/repository/contract.go -destination=test/mock/repositorymock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/gsantosc18/todo/internal/todo/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockTodoRepository is a mock of TodoRepository interface.
type MockTodoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTodoRepositoryMockRecorder
}

// MockTodoRepositoryMockRecorder is the mock recorder for MockTodoRepository.
type MockTodoRepositoryMockRecorder struct {
	mock *MockTodoRepository
}

// NewMockTodoRepository creates a new mock instance.
func NewMockTodoRepository(ctrl *gomock.Controller) *MockTodoRepository {
	mock := &MockTodoRepository{ctrl: ctrl}
	mock.recorder = &MockTodoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoRepository) EXPECT() *MockTodoRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTodoRepository) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTodoRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTodoRepository)(nil).Delete), id)
}

// Insert mocks base method.
func (m *MockTodoRepository) Insert(todo *domain.Todo) (domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", todo)
	ret0, _ := ret[0].(domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockTodoRepositoryMockRecorder) Insert(todo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTodoRepository)(nil).Insert), todo)
}

// List mocks base method.
func (m *MockTodoRepository) List(page int) *domain.PaginatedTodo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", page)
	ret0, _ := ret[0].(*domain.PaginatedTodo)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockTodoRepositoryMockRecorder) List(page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTodoRepository)(nil).List), page)
}

// Update mocks base method.
func (m *MockTodoRepository) Update(id string, todo *domain.Todo) (domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, todo)
	ret0, _ := ret[0].(domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTodoRepositoryMockRecorder) Update(id, todo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTodoRepository)(nil).Update), id, todo)
}
