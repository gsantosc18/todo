// Code generated by MockGen. DO NOT EDIT.
// Source: internal/security/service/contract.go
//
// Generated by this command:
//
//	mockgen -source=internal/security/service/contract.go -destination=test/mock/tokenservicemock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTokenService is a mock of TokenService interface.
type MockTokenService struct {
	ctrl     *gomock.Controller
	recorder *MockTokenServiceMockRecorder
}

// MockTokenServiceMockRecorder is the mock recorder for MockTokenService.
type MockTokenServiceMockRecorder struct {
	mock *MockTokenService
}

// NewMockTokenService creates a new mock instance.
func NewMockTokenService(ctrl *gomock.Controller) *MockTokenService {
	mock := &MockTokenService{ctrl: ctrl}
	mock.recorder = &MockTokenServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenService) EXPECT() *MockTokenServiceMockRecorder {
	return m.recorder
}

// NewToken mocks base method.
func (m *MockTokenService) NewToken(email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewToken", email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewToken indicates an expected call of NewToken.
func (mr *MockTokenServiceMockRecorder) NewToken(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewToken", reflect.TypeOf((*MockTokenService)(nil).NewToken), email)
}

// ValidateToken mocks base method.
func (m *MockTokenService) ValidateToken(accessToken string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", accessToken)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockTokenServiceMockRecorder) ValidateToken(accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockTokenService)(nil).ValidateToken), accessToken)
}
